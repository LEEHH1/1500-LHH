include  디랙티브 태그
<%@ include file='파일명'%>

JSP페이지의 특정 영역에 외부 파일의 내용을 포함하는 태그
포함할 수 있는 외부 파일은 HTML,JSP,텍스트 파일 등이 있다.

 taglib 디렉티브 태그
<% taglib prefix = "태그식별자" uri="경로" %>;


jsp페이지의 표현언어, JSTL, 사용자 정의 태그등
태그 라이브러리를 설정하는 태그

JSTL 태그
일반적으로 웹 애플리케이션에서 쉽게 접근 할 수 있게 해주는
라이브러리

반복문,조건문,SQL 조작을 위한 태그를 지원

JSP 내장객체
- 내장객체란 스크립트릿 안에서만 사용할 수 있는 객체로
개발자가 별도로 생성하지 않아도 JSP에서 바로 사용할 수 있는
객체
- 서블릿 컨테이너(톰캣)가 JSP를 Servlet으로 변환할 때 자동으로 객체가 생성된다.
-JSP 페이지에 별도로 import문 없이 자유롭게 사용할 수 있다.

request 요청정보가 담겨있는 객체
response 요청에 응답을 작성할때 사용하는 객체
session HTTP session을 규현한 객체, 세션 정보 저장에 사용
out 응답에 포함될 내용을 출력할 때 사용

request와 관련된 메서드
String getParameter(String name)
요청 파라미터 이름이 name인 값을 전달 받는다.

String[] getParameterValues(String name)
요청 파라미터 이름이 name인 값을배열 형태로 전달받는다.

getParameterNames()
모든 요청 파라미터의 이름과 값을 열거형 객체 타입으로 전달받는다.

getParameterMap()
모든 요청파라미터 이름과 같은 Map 객체 타입으로 전달받는다.



response 내장객체
- respone내장 객체는 사용자의 요청을 처리한 결과를 서버에서
웹 브라우저로 전달하는 정보를 저장
- 서버는 응답헤더와 요청 처리 결과 데이터를 웹 브라우저로 보낸다


페이지 이동관련 메서드
void sendRedirect(String url)

처음 요청받은 형재 JSP페이지로부터 이동할 URL을 웹브라우저로 반환한다.
클라이언트가 새로 페이지를 요청한것과 같은 방식으로
페이지가 이동된다. 이동된 URL이 웹브라우저의 주소창에 보인다.


out 내장 객체 메서드의 종류
print(String str)
println(String str)

JSP의 작동원리
1. Client가 브라우저로 JSP페이지를 요청한다.
2.JSP컨테이너(HttpJspBase)가 JSP파일을 Servlet 파일로 변환
3. hello.jsp -> hello_jsp.java -> hello_jsp.class
4. 요청한 client에 html파일 형태로 응답

JSP와 DataBase 연결하기
VO(Value Object): 한개 또는 그 이상의 속성들을 묶은 객체(조회만 담당한다.)

DTO(Data Transfer Object)
로직을 가지지 않고 setter/getter만 가진 클래스

https://mvnrepository.com/




commons-collections
Java Collection 프레임워크의 상속을 확장

commons-dbcp
데이터베이스 커넥션 풀링 서비스를 제공

commons-pool
데이터베이스와 연결된 커넥션을 미리 만들어 풀(pool)에 저장해 두었다가
필요할 때 가져다 쓰고 반환하는 기법
dbcp api를 사용할 수 있다

ojdbc
- 데이터베이스와 통신을 담당하는 인터페이스
- Oracle Java DataBase Connectivity의 약자
- Oracle 전용의 jdbc 라이브러리이다.

jdbc
Java DataBase Connectivity는 Java 기반 애플리케이션의 데이터를
데이터베이스에 저장 및 업데이트 하거나, 데이터베이스에 저장된
데이터를 Java에서 사용할 수 있도록 API이다.

java 애플리케이션에서 데이터베이스에 접근하기 위해 JDBC API
를 사용하여 데이터 베이스에 연동할 수 있으며, 데이터베이스에서
자료를 쿼리문을 통해 가져올 수 있다.
JDBC API는 java.sql.* 패키지에 클래스 형태로 있다.

JPA,Mybatis와 같은 프레임 워크들의 기반이기 때문에 jdbc의
동작 흐름에 대해 알 필요가 있다.

JDBC 드라이버 로딩

Connection 객체 생성

Statement 객체 생성

Query 실행

ResultSet 객체로부터 데이터 조회

ResultSet, Statement, Connection 순으로 연결을 끊어야한다.














