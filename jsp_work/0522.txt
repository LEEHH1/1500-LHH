웹 기초
request 와 response의 이해
- 서버(서비스하는 주체)는 클라이언트(사용하는 사람들)가 있기 때문에 동작한다.
- 서버로 요청을 보내고,서버에서는 요청의 내용을 읽고
처리한 뒤 클라이언트에 응답(response)을 보낸다
- 따라서 서버에는 요청을 받는 부분과 응답을 보내는 부분이
있어야 한다.

HTTP
- HTTP는 HTML문서와 같은 리소를 가져올 수 있도록 해주는 프로토콜이다(PROTOCOL).
- HTTP는 웹에서 이루어지는 모든 데이터 교환의 기초이며, 클라이언트 - 서버
프로토콜 이기도하다.
-클라이언트와 서버들은 개별적인 메시지 교환에 의해 통신한다.
클라이언트에 의해 전송되는 메세지가 REQUEST, 서버에서 전송되는 메시지가 RESPONSE라고한다.


헤더(HEADER)
- HTTP 헤더는 클라이언트와 서버가 요청 또는 응답으로 부가적인
정보를 전송할 수있도록 해준다.
- HTTP 헤더는 대소문자를 구분하지 않는 이름과 콜론(:) 다음에
오는 값으로 이루어져 있다. EX) NAME:...   AGE:...

일반헤더(General header)
- request와 response에 모두 적용되지만 body에서 최종적으로
전송되는 데이터와는 관련이 없는 헤더

요청 헤더 (Request header)
- 패치될 resource나 클라이언트 자체에 대한 자세한 정보를 
포함하는 헤더

응답헤더(Response header)
- 위치 또는 서버 자체에 대한 정보(이름,버전 등)와 같이 응답에
필요한 부가적인 정보를 갖는 헤더

엔티티 헤더(Entity header)
- 컨텐츠 길이나 MIME타입과 같이 엔티티 BODY에 대한 정보를
포함하는 헤더

HTTP 상태코드
브라우저는 서버에 보내주는 상태 코드를 보고 요청이
성공했는지 실패했는지를 판단한다.

2xx: 성공을 알리는 상태코드, 200(성공), 201(작성됨)
3xx: 다른 페이지로 이동을 알리는 코드.
4xx: 요청의 오류, 요청 자체에 오류가 있을 때 표시된다.
대표적으로 400(잘못된요청), 401(권한없음), 403(금지),404(찾을수 없음)
5xx: 서버오류를 나타낸다. 요청은 제대로 왔지만 서버에 오류가
있을 때 발생한다. 이 오류가 뜨지 않게 주의하여 프로그래밍 해야한다.
500(내부 서버오류), 501(불량 게이트웨이),503(서비스를 이용할 수 없음)

HTTP  요청 메서드
-클라이언트가 서버에 데이터를 전송하여 응답을 얻고자 할때
사용하는 방식
GET: 서버의 자원을 가져오고자 할 때 사용한다.요청한 자원을
본문에 넣지 않는다.데이터를 서버로 보내야 한다면 쿼리스트링()을
사용한다.

POST: 서버에 자원을 새로 등록하고자 할 때 사용한다. 요청의
본문에 새로 등록할 데이터를 넣어보낸다.

PATCH: 리소스의 일부분만 변경할 때 사용한다.

PUT : 리소스 전체를 변경할 때 사용하는 메서드

DELETE : 리소스를 제거하는 메서드

서블릿(Servlet)
Servlet 이란 자바를 기반으로 하는 웹 어플리케이션 프로그래밍 기술
sevlet 기술을 발전시킨것이 스프링이다.
스프링은 실제 Servlet을 이용하여 동작하기도 한다.
자바 클래스 형태로 웹 애플리케이션을 작성하기 때문에 확장자가 .java이다.

java 클래스를 기반으로 html을 첨가해서 사용 할 수 있다.


servlet의 개요
- servlet 기술에서 웹 애플리케이션을 구현하기 위해 작성해야 하는 코드는
'Servlet class'이다.
- 이 클래스는 클래스 상태로 실행되는 것이 아니라 'servlet'으로 만들어진
다음에 실행된다.
- 즉 Servlet은 Servlet클래스로부터 만들어진 객체

서블릿 클래스를 작성할 때 지켜야할 규칙
javax.servlet.http.HttpServlet을 상속받아야 한다.
- doGet(),doPost() 메서드 안에 웹브라우저로부터 요청이 왔을 때
해야 할 일을 기술한다.

HttpServlet 클래스의 메서드

void init()
서블릿이 처음에 요청을 처리하기 전에 호출되며, 서블릿 초기화 작업을
수행한다.

void doGet(ServletRequest req, ServletResponse res)
클라이언트로 부터 GET요청을 받을 때 호출

void doPost(ServletRequest req,ServletResponse res)
클라이언트로부터 POST요청을 받았을 때 호출

void service(ServletRequest req, ServletResponse res)
각 요청에 대해 호출되며, 실제 서블릿이 요청하는 로직을 구현한다.

void destroy()
서블릿이 종료될 때 호출되며, 서블릿이 사용한 자원을 정리하고
마무리 작업을 수행한다.


JSP
JavaServerPage의 약자로 HTML코드에서 Java코드를 사용하여
동적인 웹페이지를 생성하는 라이브러리
JSP가 하나의 Java클래스이기 때문에 Java라이브러리를 끌어다
사용할 수 있다.

jsp와 Servlet의 차이점
Servlet : 복잡한 로직 구현에 적합함,Java코드 중심의 화면 작성 작업과
수정이 어려움

JSP : HTML 코드 중심 -> 화면 작성 작업, 수정이 용이, 소스보기로 소스가
공개되어 중요정보에 부적합

JSP에 JAVA코드 넣는 방법

스크립트 태그의 종류
스크립트 릿 <%...%> 자바 로직 코드를 작성하는데 사용한다.
선언문 <%!...%> 자바변수나 메서드를 정의하는 데 사용한다.
표현문 <%=...%> 변수, 계산식, 메서드 호출 결과를 문자열 형태로 출력

디랙티브 태그 
<%@ page...%> JSP 페이지에 대한 정보를 설정한다.
<%@ include...%> JSP페이지의 특정 영역에 다른 문서를 포함한다.
<%@ taglib...%> JSP페이지에서 사용할 태그 라이브러리를 설정





























